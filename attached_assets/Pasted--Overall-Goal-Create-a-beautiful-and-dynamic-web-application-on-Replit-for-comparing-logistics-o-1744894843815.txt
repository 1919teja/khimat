**Overall Goal:** Create a beautiful and dynamic web application on Replit for comparing logistics options in India, with a user experience inspired by Trivago.

**Core Functionality:** Allow users to input shipment details (origin, destination, weight, dimensions) and view a comparison of prices, estimated delivery times, and service types from various Indian logistics companies.

**Technical Stack:**
* **Frontend:** React (with Tailwind CSS for styling)
* **Backend:** Node.js with Express

**Key Features (MVP for Replit):**

1.  **Intuitive Input Form:**
    * Fields for origin (autocomplete using a basic list of major Indian cities/pin codes - no need for complex API integration in this initial Replit version).
    * Fields for destination (autocomplete as above).
    * Input fields for weight (with unit selection - kg, g).
    * Optional fields for dimensions (length, width, height with unit selection - cm, inches).
    * Dropdown or radio buttons for service type preference (e.g., Standard, Express).
    * Clear "Compare" button.

2.  **Dynamic Comparison Results Display:**
    * Display results in a clean, card-based layout, similar to hotel listings on Trivago.
    * For each logistics option, show:
        * Company logo (use placeholders or fetch from a simple static JSON if possible).
        * Price (display in INR).
        * Estimated delivery time (display a range, e.g., "2-3 days").
        * Service type.
        * A brief description or key features (e.g., "Doorstep Pickup").
        * A clear "View Details" or "Select" button (can link to the logistics company's website or a placeholder details page for now).
    * Basic sorting options (e.g., "Sort by Price: Low to High," "Sort by Delivery Time: Fastest").

3.  **Simple Data Handling (for Replit Prototype):**
    * **Backend:** Store a limited, hardcoded dataset of sample logistics options in a JSON file or a simple JavaScript array. This will simulate fetching data from a real database. Include fields for company name, price, min/max delivery days, service type, description, and a placeholder logo URL.
    * **API Endpoints:** Create a simple Express API endpoint (`/api/compare`) that accepts shipment details as query parameters or in the request body and filters/sorts the hardcoded data accordingly.

4.  **Beautiful Interface & Dynamic UX (Tailwind CSS):**
    * Utilize Tailwind CSS classes for rapid styling and a modern, clean look.
    * Focus on clear typography, spacing, and intuitive visual hierarchy.
    * Implement basic dynamic updates on the frontend (e.g., displaying "Loading..." while fetching data, updating results when sorting options are changed).

**Replit Project Setup Steps (as part of the prompt):**

1.  **Create a new React Repl.**
2.  **Install necessary dependencies:**
    ```bash
    npm install express cors tailwindcss autoprefixer postcss
    npx tailwindcss init -p
    ```
3.  **Configure Tailwind CSS:** (Include basic configuration instructions for `tailwind.config.js` and `postcss.config.js`).
4.  **Create `server.js` (for the backend) and `src` folder (for the frontend).**
5.  **Set up basic routing in both frontend (React Router DOM) and backend (Express).**

**Specific Instructions & Inspiration from Trivago:**

* **Input Area:** Keep the input form prominent and easy to use, similar to Trivago's hotel search bar.
* **Visual Appeal:** Use clear icons and a consistent color scheme inspired by modern travel/e-commerce websites. Tailwind CSS will help with this.
* **Card-Based Results:** The comparison results should be displayed in visually appealing cards, making it easy to scan and compare different options.
* **Dynamic Updates:** Even with hardcoded data, simulate dynamic updates (e.g., a slight delay when "fetching" data, immediate re-sorting of results).
* **Focus on Key Comparison Points:** Prioritize price and delivery time prominently, just like Trivago highlights the price per night.

**Stretch Goals (Optional for Replit if time allows):**

* Basic client-side form validation.
* More sophisticated filtering options (e.g., filter by specific logistics companies).
* A simple "Details" page for each logistics option.

**Keep it Simple for Replit:** The goal in Replit is to create a functional and visually representative prototype. Don't get bogged down in complex data fetching or database integrations at this stage. Focus on the core comparison flow and a beautiful, dynamic user experience using React and Tailwind CSS with a simulated backend.
